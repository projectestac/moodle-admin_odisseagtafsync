<?php

/**
 * This class takes, process, save and show log during the live of the object monitored
 *
 * @author IECISA @mmartinez
 * @version 1.1
 *
 */
final class odissea_log4p
{
    private $log = [];
    private $savetofile;
    private $debug;

    /**
     * Call this method to get the singleton
     *
     * @param false $savetofile
     * @param string $savetofilepath
     * @param false $debug
     * @return odissea_log4p|null
     */
    public static function instance($savetofile = false, $savetofilepath = '', $debug = false) {
        static $inst = null;
        if ($inst === null) {
            $inst = new odissea_log4p($savetofile, $savetofilepath, $debug);
        }
        return $inst;
    }

    /**
     * Class constructor
     *
     * @param bool $savetofile Set on/off the functionality to save to file
     * @param string $savetofilepath -> Path and filename where the log have to be saved when $savetofile is set to true
     * @param bool $debug
     */
    private function __construct($savetofile = false, $savetofilepath = '', $debug = false) {
        $this->debug = $debug;

        if ($savetofile == false) {
            $this->savetofile = false;
            $this->add('odissea_log4p: Log set to off as requested', 'WARNING');
            return;
        }

        $this->savetofile = $this->loadsavetofile($savetofilepath);
    }

    /**
     * Class destructor
     *
     * Used to close de file pointer
     */
    function __destruct() {
        $this->add('odissea_log4p: Closing log file', 'DEBUG');
        if ($this->filelogpointer && !fclose($this->filelogpointer)) {
            $this->add('Logger: trying to close file log pointer failed');
        }
        $this->filelogpointer = false;
        $this->savetofile = false;
    }

    /**
     * Add entry to the log
     *
     * @param string $str Log entry text
     * @param string $type Allowed values: ERROR, WARNING, INFO
     */
    public function add($str, $type = 'INFO') {

        if ($type == 'DEBUG' && !$this->debug) {
            // Debug not allowed
            return;
        }

        // Alowed type values
        $typesallowed = ['ERROR', 'WARNING', 'INFO', 'DEBUG'];

        if (!in_array($type, $typesallowed)) {
            $type = 'UNKNOWN';
        }

        // Add log to our variable
        $this->log[] = date('[Y-m-d H:i:s] ') . $type . ': ' . $str;

        // Save log to file if its switched on
        if ($this->savetofile) {
            $this->addtofile($this->log[count($this->log) - 1]);
        }
    }

    /**
     * Save log entry in a file
     *
     * @param string $str Log entry text
     * @param string $delimiter Characters used to distinguish one line from other
     * @return bool
     */
    private function addtofile($str = '', $delimiter = "\n"): bool {

        if (empty($str)) {
            return false;
        }

        // Save in file
        if (!fwrite($this->filelogpointer, $str . $delimiter)) {
            $this->savetofile = false;
            $this->add('odissea_log4p: addtofile cant write in log file. Save to file has been switch to off.', 'ERROR');
            return false;
        }

        return true;
    }

    /**
     * Convert log array to a string using the defined delimiter
     *
     * @param string $delimiter -> characters used to diference one line from other
     * @return string            -> string with all the entries in log separated by the delimeter
     */
    public function get_log($delimiter = "\n") {
        if (empty($this->log)) {
            return false;
        }
        return implode($delimiter, $this->log);
    }

    /**
     * Print de log generated by the class
     *
     * @return string -> full string with the log
     */
    public function print_log() {
        if ($log = $this->get_log('<br>')) {
            echo '<br><br><b>Log generated on ' . date("d-m-Y H:i:s") . ':</b><br>' . $log;
        }
    }

    /**
     * Function that put the saver on or off if savetofilepath exits and is writable
     *
     * @param string $savetofilepath -> path and file name where the log have to be saved when $state is set to true
     * @param string $delimiter -> characters used to distinguish one line from another
     * @return bool                   -> true if saver could be switched to on or false if not
     */
    private function loadsavetofile($savetofilepath = '', $delimiter = "\n") {

        $this->filelogpointer = false;

        // Check if parameters are set to true and are correct
        if (empty($savetofilepath)) {
            $this->add('odissea_log4p: Missing file to save log. Log won\'t be saved to file.', 'WARNING');
            return false;
        }

        // Remove filename if present
        $stringtosearch = '.log';
        if (substr($savetofilepath, -strlen($stringtosearch)) === $stringtosearch) {
            $filepatharray = explode("/", $savetofilepath);
            array_pop($filepatharray);
            $savetofilepath = implode("/", $filepatharray);
        }

        // Check if log folder exits
        if (!is_dir($savetofilepath)) {
            if (!mkdir($savetofilepath)) {
                $this->add('odissea_log4p: Directory ' . $savetofilepath . ' does not exist and it was not possible to create it.', 'WARNING');
                return false;
            }
        }

        // Erase old files
        $search = $savetofilepath . '/log/gtaf' . '_' . date("Ym", strtotime("-2 month"));
        foreach (glob($search . '*.log') as $filename) {
            unlink($filename);
        }

        // Add Filename
        $savetofilepath .= '/log/gtaf' . '_' . date("Ymd") . '.log';
        // Open or create log file
        if (!$file = fopen($savetofilepath, "a+")) {
            $this->add('odissea_log4p: File ' . $savetofilepath . 'does not exit and it was not possible to create it.', 'WARNING');
            return false;
        }

        // Test if its posible to save in file
        if (!fwrite($file, $delimiter)) {
            $this->add('odissea_log4p: Impossible to write in log file. Save to file has been switched off.', 'ERROR');
            return false;
        }

        $this->filelogpointer = $file;

        $this->add('odissea_log4p: loaded correctly in ' . $savetofilepath);

        return true;
    }
}
